buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE")
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.4.0"
    }
}

apply plugin: 'java'
apply plugin: 'scala'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'project-report'

apply plugin: "com.diffplug.gradle.spotless"

jar {
    baseName = 'countMeUp'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {

    ext.gatlingVersion = '2.1.7'

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude module: 'org.hibernate'
    }
    compile("org.scala-lang:scala-library:2.11.8")
    compile("mysql:mysql-connector-java")
    compile("joda-time:joda-time")
    compile("org.hibernate:hibernate-core:5.2.1.Final")
    compile("org.hibernate:hibernate-entitymanager:5.2.1.Final")
    compile("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.2.1")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-joda")
    compile("org.jadira.usertype:usertype.core:6.0.1.GA")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.jsonpath:json-path')
    testCompile('com.h2database:h2')
    testCompile('org.scalatest:scalatest_2.11:3.0.0')

    compile group: 'io.gatling', name: 'gatling-app', version: gatlingVersion
    compile group: 'io.gatling', name: 'gatling-recorder', version: gatlingVersion
    compile group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: gatlingVersion

}

task gatlinLoad(dependsOn: 'compileTestScala') doLast {
    javaexec {
        main = 'io.gatling.app.Gatling'
        classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
        args    '-sf', sourceSets.test.output,            //source folder
                '-bf', sourceSets.test.output.classesDir, //target folder where gatling will compile the simulation
                '-s', 'com.vote.CountUpSimulation',                   //The simulation to run
                '-rf', 'build/reports/gatling'            //place to put the report
    }
}


task gatlinCount(dependsOn: 'compileTestScala') doLast{
    javaexec {
        main = 'io.gatling.app.Gatling'
        classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
        args    '-sf', sourceSets.test.output,            //source folder
                '-bf', sourceSets.test.output.classesDir, //target folder where gatling will compile the simulation
                '-s', 'com.vote.CountUpResultsSimulation',                   //The simulation to run
                '-rf', 'build/reports/gatling'            //place to put the report
    }
}

spotless {
    java {
        googleJavaFormat() // googleJavaFormat('1.1') to specify a specific version
    }

    scala {
        scalafmt()
    }
}



